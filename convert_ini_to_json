#!/usr/bin/python3
import sys, json, copy
src='config.ini'
dst='config.json'
assert(len(sys.argv) in [1, 3])
if(len(sys.argv)==3):
    src=sys.argv[1]
    dst=sys.argv[2]
try:
    fin=open(src, 'r')
except IOError:
    print('%s 不存在。'%src)
    sys.exit(0)
fout=open(dst, 'w')
n=int(fin.readline())
cases=[]
score_map=[]
begin=0
for i in range(n):
    in_, out, time, score=fin.readline().split('|')
    cases.append({'in': in_, 'out': out, 'time': float(time), 'score': 1})
    score=float(score)
    if score!=0:
        score_map.append({'type': 'min', 'cases': list(range(begin, i+1)), 'weight': score})
        begin=i+1;
while True:
    print('配置列表');
    for i in range(len(score_map)):
        cursub=score_map[i]
        curcases=cursub['cases']
        cases_str=[]
        l=0
        while l<len(curcases):
            r=l
            while r<len(curcases) and curcases[r]-curcases[l]==r-l: r+=1
            if r-l<=2: cases_str.append(str(curcases[l]+1))
            if r-l==2: cases_str.append(str(curcases[l+1]+1))
            if r-l>=3: cases_str.append('%d-%d'%(curcases[l]+1, curcases[r-1]+1))
            l=r
        print('子任务 %d (%d 分) 包含测试点 %s'%(i+1, cursub['weight'], ', '.join(cases_str)))
    print('========== 编辑 ===========')
    print('> Ctrl-D 退出')
    print('> a->b 把子任务 a 的所有测试点加入子任务 b')
    print('> a+=b 在子任务 a 中加入测试点 b')
    print('> a-=b 在子任务 a 中移除测试点 b')
    try:
        cmd=input();
        if cmd.find('->')!=-1:
            a, b=map(lambda s: int(s)-1, cmd.split('->'))
            score_map[b]['cases']=sorted(set(score_map[a]['cases']+score_map[b]['cases']))
        if cmd.find('+=')!=-1:
            a, b=map(lambda s: int(s)-1, cmd.split('+='))
            score_map[a]['cases'].append(b)
            score_map[a]['cases']=sorted(set(score_map[a]['cases']))
        if cmd.find('-=')!=-1:
            a, b=map(lambda s: int(s)-1, cmd.split('-='))
            score_map[a]['cases'].remove(b)
    except EOFError:
        break;
for i in range(n):
    depends=set(range(i))
    for j in score_map:
        if i in j['cases']:
            depends.intersection_update(j['cases'])
    for j in range(i):
        if j in depends and depends.issuperset(cases[j]['depends']):
            depends.difference_update(cases[j]['depends'])
    cases[i]['depends']=depends;
for i in cases:
    if i['depends']==set():
        del i['depends']
    else:
        i['depends']=sorted(map(lambda x: x+1, i['depends']));
for i in score_map:
    i['cases']=sorted(map(lambda x: x+1, i['cases']))
json.dump({'cases': cases, 'score_map': score_map}, fout, indent=4);
fin.close();
fout.close();
